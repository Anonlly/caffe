import {
  Avatar,
  Box,
  Flex,
  Spacer,
  Text,
  useDisclosure,
}
  from '@chakra-ui/react'
import { SettingsIcon } from "@chakra-ui/icons"
import color from "../etc/colors"
import Head from 'next/head'
import React, { useEffect, useState, useReducer } from 'react'
import app from "../utils/firebase"
import * as auth from "firebase/auth"
import * as firestore from "firebase/firestore"

import Login from "../components/login"
import Settings from "../components/settings"
import { setDoc } from 'firebase/firestore'

/**
 * initialization of User store
 * below are store's expected properties
 */
const UserContext = React.createContext()
const userInitialState = {
  name: "",
  email: "",
  createdAt: "",
  avatar: "",
  fullName: ""
}
function userReducer(state, action) {
  const Auth = auth.getAuth(app)
  switch (action.type) {
    case 'Login':
      (async () => {

        localStorage.setItem("user", JSON.stringify(action.data))
        localStorage.setItem("isLoggedIn", "true")

      })()

      return {
        uid: action.data.uid,
        name: action.data.name,
        email: action.data.email,
        createdAt: action.data.createdAt,
        avatar: action.data.avatar,
        fullName: action.data.fullName
      }
    case 'Logout':
      localStorage.setItem("user", "{}")
      localStorage.setItem("isLoggedIn", "false")
      return userInitialState
    case 'UpdateName':
      auth.updateProfile(Auth.currentUser, {
        displayName: action.data.fullName,
      })
      localStorage.setItem("user", JSON.stringify({ ...state, ...action.data }))
      return { ...state, ...action.data }
    case 'UpdateAvatar':
      auth.updateProfile(Auth.currentUser, {
        photoURL: action.data.avatar,
      })
      localStorage.setItem("user", JSON.stringify({ ...state, ...action.data }))
      return { ...state, ...action.data }
    case "SetTemporaryAvatar":
      return { ...state, avatar: action.data.avatar }
    default:
      throw new Error("Please provide valid reducer action")
  }
}

/**
 * initialization of App store
 * global state for storing tasks properties, server properties, and certain configuration
 * below are store's expected properties
 */
const AppContext = React.createContext()
const appInitialState = {
  tasks: [],
  servers: [],
  config: {
    isLoggedIn: false,
  }
}
function appReducer(state, action) {
  switch (action.type) {
    case 'AddTask':
      return { ...state, tasks: [...state.tasks, action.data.task] }
    case 'AddServer':
      return { ...state, servers: [...state.servers, action.data.server] }
    case 'ChangeConfig':
      return { ...state, config: { ...state.config, ...action.data.config } }
    default:
      throw new Error("Please provide valid reducer action")
  }
}

export { UserContext }
export { AppContext }

export default function Home() {
  const [userStore, dispatchUserStore] = useReducer(userReducer, userInitialState)
  const [appStore, dispatchAppStore] = useReducer(appReducer, appInitialState)

  useEffect(() => {
    const Auth = auth.getAuth(app)
    localStorage.getItem("isLoggedIn") === "true" && onLoginClose()
    Auth.onAuthStateChanged(user => {
      if (user === null) {
        return
      }
      if (user.email !== null) {
        localStorage.setItem("isLoggedIn", "true")
        onLoginClose()
        dispatchUserStore({
          type: "Login", data: {
            uid: user.uid,
            name: user.displayName.split(" ")[0],
            email: user.email,
            createdAt: user.metadata.creationTime,
            avatar: user.photoURL,
            fullName: user.displayName
          }
        })
      }
    })
  }, [])

  const { isOpen, onOpen, onClose } = useDisclosure()
  const { isOpen: isLoginOpen, onOpen: onLoginOpen, onClose: onLoginClose } = useDisclosure({ defaultIsOpen: true })
  return (
    <AppContext.Provider value={{ appStore, dispatchAppStore }}>
      <UserContext.Provider value={{ userStore, dispatchUserStore }}>
        <div>
          <Head>
            <title>Caffe</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          <main>
            <Flex sx={{ filter: isLoginOpen ? "blur(5px)" : "none" }} flexDirection={"row"} height="100vh">
              <Box bg={color.subBase} minW={"250px"} maxW={"250px"} flexGrow={1}>
                <Flex flexDirection={"row"} margin="30px 15px" alignItems="center">
                  <Avatar src={userStore.avatar} borderRadius={"15px"} />
                  <Box marginLeft={3}>
                    <Text color={color.rosewater}>{userStore.fullName}</Text>
                    <Text color={color.subtext}>Online</Text>
                  </Box>
                  <Spacer />
                  <SettingsIcon w={5} h={5} marginRight={"1vw"} cursor="pointer" color="#AAAAAA" onClick={onOpen} />
                </Flex>
              </Box>
              <Box bg={color.base} flexGrow={19}>

              </Box>
            </Flex>

            {/* Settings Modal */}
            <Settings
              isOpen={isOpen}
              onOpen={onOpen}
              onClose={onClose} />
            {/* Login Modal */}
            <Login
              isLoginOpen={isLoginOpen}
              onLoginClose={onLoginClose}
              onLoginOpen={onLoginOpen} />
          </main>
        </div>
      </UserContext.Provider>
    </AppContext.Provider>
  )
}
